# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - tursd-front

on:
  push:
    branches:
      - master # Or your main branch name, e.g., 'main'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x' # Ensure this matches your local Node.js version used for Angular

      - name: Install Angular dependencies
        run: npm install # Install all project dependencies first

      - name: Build Angular application for production (with SSR)
        # This command builds your Angular app for production, including SSR,
        # and outputs it to the specified dist folder.
        run: npm run build --configuration production --output-path dist/back-tursd
        # If your package.json does NOT have a "build" script that calls ng build,
        # use this instead:
        # run: npx ng build --configuration production --output-path dist/back-tursd

      # Optional: Run tests if you have them and want to include in CI
      # - name: Run tests
      #   run: npm test --if-present

      - name: Zip artifact for deployment
        # This command zips the *contents* of your Angular build output (dist/back-tursd).
        # This is the most common and robust way to package an Angular app for App Services.
        run: |
          cd dist/back-tursd # Change to the build output directory
          zip -r ../../release.zip ./* # Zip its contents, placing the zip file two levels up
        # Explanation:
        # cd dist/back-tursd: Moves into the directory containing your compiled app files.
        # zip -r ../../release.zip ./*: Zips all files/folders in the *current* directory (./*)
        #                               and places the zip file outside of the dist folder (../../).

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip # Point to the zip file created above

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        # The zip contains the *contents* of dist/back-tursd, so unzipping here
        # will place those contents directly in the current working directory.
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          # Use your exact secret names from GitHub. These match what you provided.
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8A31F52B5BB94BAD9283500E746C1C13 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_BE9698A6663A4DB18B6A470FF3D6D1AA }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1254A5CE47EA465396EA36864E61F1AB }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3 # Correct action for App Services
        with:
          app-name: 'tursd-front' # Your Azure App Service name
          slot-name: 'Production'
          # Since 'release.zip' now contains the direct contents of 'dist/back-tursd',
          # the package path for deployment is simply the current directory.
          package: '.'
